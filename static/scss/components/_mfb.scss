/* OTHER VARIABLES -------------------*/

// how many child buttons does the component have
$number-of-child-buttons: 4 !default;

/* SHADOW ---------------------------*/


/* EFFECTS ---------------------------*/

// which effects must be made available in the css
$effects-zoomin: true !default;
$effects-slidein: true !default;
$effects-fountain: true !default;

/* SPEEDS ----------------------------*/

// the speed of the inflation of each button after hovering on the main button
$delay-staggering-inflate: 0.1s !default;
// when hovering on the main button the child buttons slide into view
$slide-speed: .5s !default;
// the labels disappear at this speed on mouse out
$label-hover-off: .5s !default;
// the labels appear at this speed on mouse over
$label-hover-on: .3s !default;

/* SIZES -----------------------------*/

// main button diameter
$mfb-main-button-size: 46px !default;
// main button diameter
$child_button_size: 46px !default;
// the distance of the main button from the closest corners of the screen
$border-distance: 25px !default;
// font-size for the icons
$icons-font-size: 22px !default;

/* SPACING ---------------------------*/

// space between buttons
$mfb-button-space: 54px !default;
// space between button and label
$mfb-button-label-space: 50px !default;



/*------------------------------------*\
    #BASE | Raw styles
\*------------------------------------*/

/**
 * The very core styling of the button.
 * These styles are shared by every instance of the button.
 * Styles placed here should NOT care about placement in the screen,
 * options chosen by the user or state of the button.
 */

%mfb-component {
    box-sizing: border-box; // A better box-sizing
    margin: $border-distance;
    position: absolute;
    white-space: nowrap;
    z-index: 30;
    // this padding is really needed  only if the element is an <ul>
    // otherwise it can probably be ditched.
    padding-left: 0;
    list-style: none;

    // make sure that everything inside this component
    // inherits the same box-sizing
    *,
    *:before,
    *:after {
        box-sizing: inherit;
    }
}


/*------------------------------------*\
    #BASE | Modifiers
\*------------------------------------*/
/**
 * These styles depends on the placement of the button.
 * Styles can be:
 * 1. Top-left:  modified by the " --tl " suffix.
 * 2. Top-right: modified by the " --tr " suffix.
 * 3. Bottom-left:  modified by the " --bl " suffix.
 * 4. Bottom-right: modified by the " --br " suffix.
 */

.mfb-component--tl {
    @extend %mfb-component;
    left: 0;
    top: 0;
}

.mfb-component--tr {
    @extend %mfb-component;
    right: 0;
    top: 0;
}

.mfb-component--bl {
    @extend %mfb-component;
    left: 0;
    bottom: 0;
}

.mfb-component--br {
    @extend %mfb-component;
    right: 0;
    bottom: 30px;
}


/*------------------------------------*\
    #BUTTONS | Base
\*------------------------------------*/

%mfb-component__button {
    display: inline-block;
    position: relative;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    outline: none;
    padding: 0;
    position: relative;
    -webkit-user-drag: none;
   
}

/**
 * This is the unordered list for the list items that contain
 * the child buttons.
 *
 */
.mfb-component__list {
    list-style: none;
    margin: 0;
    padding: 0;

    &>li {
        display: block;
        position: absolute;
        top: 0;
        right: ($mfb-main-button-size - $child_button_size + 2) / 2;
        padding: 10px + ($mfb-main-button-size - $child_button_size) / 2 0;
        margin: -(10px + ($mfb-main-button-size - $child_button_size) / 2) 0;
    }
}

/**
 * These are the basic styles for all the icons inside the main button
 */
.mfb-component__icon {
    // position: absolute;
    font-size: $icons-font-size;
    text-align: center;
    line-height: $mfb-main-button-size;
    width: 100%;


    display: flex;
    align-items: center;
    justify-content: center;
}

.mfb-component__wrap {
    height: 2.875rem;
    width: 2.875rem;
}

[data-mfb-toggle="hover"]:hover,
[data-mfb-state="open"] {
    .mfb-component__icon {
        -webkit-transform: scale(1) rotate(0deg);
        transform: scale(1) rotate(0deg);
    }
}


/*------------------------------------*\
    #BUTTONS | Modifiers
\*------------------------------------*/

.mfb-component__button--main {
    @extend %mfb-component__button;
    height: $mfb-main-button-size;
    width: $mfb-main-button-size;
    z-index: 20;

    &:hover{
        text-decoration: none;
    }
    
}

.mfb-component__button--child {
    @extend %mfb-component__button;
    height: $child_button_size;
    width: $child_button_size;

    
    &:hover{
        text-decoration: none;
    }
}

// the icons for the main button
.mfb-component__main-icon--active,
.mfb-component__main-icon--resting {
    @extend .mfb-component__icon;
    -webkit-transform: scale(1) rotate(360deg);
    transform: scale(1) rotate(360deg);
    -webkit-transition: -webkit-transform 150ms cubic-bezier(.4, 0, 1, 1);
    transition: transform 150ms cubic-bezier(.4, 0, 1, 1);
}

// the icons for the main button
.mfb-component__child-icon,
.mfb-component__child-icon {
    @extend .mfb-component__icon;
    line-height: $child_button_size;
    font-size: 24 / 56 * $child_button_size;
}

.mfb-component__main-icon--active {
    opacity: 0;
}

[data-mfb-toggle="hover"]:hover,
[data-mfb-state="open"] {
    .mfb-component__main-icon {
        -webkit-transform: scale(1) rotate(0deg);
        transform: scale(1) rotate(0deg);
    }

    .mfb-component__main-icon--resting {
        opacity: 0;
        // don't remove this, needed for ng-mfb downstream repo!
        position: absolute !important;
    }

    .mfb-component__main-icon--active {
        opacity: 1;
    }
}

/*------------------------------------*\
    #BUTTONS | Animations
\*------------------------------------*/
@mixin effects-fountain {

    /**
     * FOUNTAIN
     * When hovering the main button the child buttons
     * jump into view from outside the viewport
     */

    .mfb-component--tl.mfb-fountain,
    .mfb-component--tr.mfb-fountain {
        .mfb-component__list {
            li {
                -webkit-transform: scale(0);
                transform: scale(0);
            }

            @for $i from 1 through $number-of-child-buttons {
                $distance: -1 * $mfb-button-space * $i;

                li:nth-child(#{$i}) {
                    -webkit-transform: translateY($distance) scale(0);
                    transform: translateY($distance) scale(0);
                    transition: all $slide-speed;
                    // this is the delay at which the buttons start disappearing
                    transition-delay: ($number-of-child-buttons - $i) * 0.05s;
                }
            }
        }

        &[data-mfb-toggle="hover"]:hover,
        &[data-mfb-state="open"] {
            .mfb-component__list {
                @for $i from 1 through $number-of-child-buttons {
                    $distance: $mfb-button-space * $i;

                    li:nth-child(#{$i}) {
                        -webkit-transform: translateY($distance) scale(1);
                        transform: translateY($distance) scale(1);
                        // this is the delay at which the buttons appear          
                        transition-delay: $i * 0.05s;
                    }
                }
            }
        }
    }

    .mfb-component--bl.mfb-fountain,
    .mfb-component--br.mfb-fountain {
        .mfb-component__list {
            li {
                -webkit-transform: scale(0);
                transform: scale(0);
            }

            @for $i from 1 through $number-of-child-buttons {
                $distance: $mfb-button-space * $i;

                li:nth-child(#{$i}) {
                    -webkit-transform: translateY($distance) scale(0);
                    transform: translateY($distance) scale(0);
                    transition: all $slide-speed;
                    // this is the delay at which the buttons start disappearing
                    transition-delay: ($number-of-child-buttons - $i) * 0.05s;
                }
            }
        }

        &[data-mfb-toggle="hover"]:hover,
        &[data-mfb-state="open"] {
            .mfb-component__list {
                @for $i from 1 through $number-of-child-buttons {
                    $distance: -1 * $mfb-button-space * $i;

                    li:nth-child(#{$i}) {
                        -webkit-transform: translateY($distance) scale(1);
                        transform: translateY($distance) scale(1);
                        // this is the delay at which the buttons appear          
                        transition-delay: $i * 0.05s;
                    }
                }
            }
        }
    }

}

@mixin effects-slidein-spring {

    /**
    * SLIDE IN SPRING
    * Same as slide-in but with a springy animation.
    *
    */

    .mfb-component--tl.mfb-slidein-spring,
    .mfb-component--tr.mfb-slidein-spring {
        .mfb-component__list li {
            opacity: 0;
            transition: all $slide-speed;
            transition-timing-function: cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        @for $i from 1 through $number-of-child-buttons {
            .mfb-component__list li:nth-child(#{$i}) {
                transition-delay: #{$i * 0.05}s;
            }
        }

        &[data-mfb-toggle="hover"]:hover,
        &[data-mfb-state="open"] {
            .mfb-component__list {
                li {
                    opacity: 1;
                }

                @for $i from 1 through $number-of-child-buttons {
                    $distance: $mfb-button-space * $i;

                    li:nth-child(#{$i}) {
                        transition-delay: #{$i * 0.05}s;
                        -webkit-transform: translateY($distance);
                        transform: translateY($distance);
                    }
                }
            }
        }
    }

    .mfb-component--bl.mfb-slidein-spring,
    .mfb-component--br.mfb-slidein-spring {
        .mfb-component__list li {
            opacity: 0;
            transition: all $slide-speed;
            transition-timing-function: cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        @for $i from 1 through $number-of-child-buttons {
            .mfb-component__list li:nth-child(#{$i}) {
                transition-delay: #{$i * 0.05}s;
            }
        }

        &[data-mfb-toggle="hover"]:hover,
        &[data-mfb-state="open"] {
            .mfb-component__list {
                li {
                    opacity: 1;
                }

                @for $i from 1 through $number-of-child-buttons {
                    $distance: -1 * $mfb-button-space * $i;

                    li:nth-child(#{$i}) {
                        transition-delay: #{$i * 0.05}s;
                        -webkit-transform: translateY($distance);
                        transform: translateY($distance);
                    }
                }
            }
        }
    }

}

@mixin effects-slidein {

    /**
    * SLIDE IN + FADE
    * When hovering the main button, the child buttons slide out from beneath
    * the main button while transitioning from $transparent to opaque.
    *
    */

    .mfb-component--tl.mfb-slidein,
    .mfb-component--tr.mfb-slidein {
        .mfb-component__list li {
            opacity: 0;
            transition: all $slide-speed;
        }

        &[data-mfb-toggle="hover"]:hover,
        &[data-mfb-state="open"] {
            .mfb-component__list {
                li {
                    opacity: 1;
                }

                @for $i from 1 through $number-of-child-buttons {
                    $distance: $mfb-button-space * $i;

                    li:nth-child(#{$i}) {
                        -webkit-transform: translateY($distance);
                        transform: translateY($distance);
                    }
                }
            }
        }
    }

    .mfb-component--bl.mfb-slidein,
    .mfb-component--br.mfb-slidein {
        .mfb-component__list li {
            opacity: 0;
            transition: all $slide-speed;
        }

        &[data-mfb-toggle="hover"]:hover,
        &[data-mfb-state="open"] {
            .mfb-component__list {
                li {
                    opacity: 1;
                }

                @for $i from 1 through $number-of-child-buttons {
                    $distance: -1 * $mfb-button-space * $i;

                    li:nth-child(#{$i}) {
                        -webkit-transform: translateY($distance);
                        transform: translateY($distance);
                    }
                }
            }
        }
    }

}

@mixin effects-zoomin {

    /**
    * ZOOM-IN
    * When hovering the main button, the child buttons grow
    * from zero to normal size.
    *
    */

    .mfb-component--tl.mfb-zoomin,
    .mfb-component--tr.mfb-zoomin {
        .mfb-component__list {
            li {
                -webkit-transform: scale(0);
                transform: scale(0);
            }

            @for $i from 1 through $number-of-child-buttons {
                $distance: $mfb-button-space * $i;

                li:nth-child(#{$i}) {
                    -webkit-transform: translateY($distance) scale(0);
                    transform: translateY($distance) scale(0);
                    transition: all $slide-speed;
                    // this is the delay at which the buttons *disappear*
                    transition-delay: ($number-of-child-buttons - $i) * 0.05s;
                }
            }
        }

        &[data-mfb-toggle="hover"]:hover,
        &[data-mfb-state="open"] {
            .mfb-component__list {
                @for $i from 1 through $number-of-child-buttons {
                    $distance: $mfb-button-space * $i;

                    li:nth-child(#{$i}) {
                        -webkit-transform: translateY($distance) scale(1);
                        transform: translateY($distance) scale(1);
                        // this is the delay at which the buttons *appear*
                        transition-delay: $i * 0.05s;
                    }
                }
            }
        }
    }

    .mfb-component--bl.mfb-zoomin,
    .mfb-component--br.mfb-zoomin {
        .mfb-component__list {
            li {
                -webkit-transform: scale(0);
                transform: scale(0);
            }

            @for $i from 1 through $number-of-child-buttons {
                $distance: -1 * $mfb-button-space * $i;

                li:nth-child(#{$i}) {
                    -webkit-transform: translateY($distance) scale(0);
                    transform: translateY($distance) scale(0);
                    transition: all $slide-speed;
                    // this is the delay at which the buttons start disappearing
                    transition-delay: ($number-of-child-buttons - $i) * 0.05s;
                }
            }
        }

        &[data-mfb-toggle="hover"]:hover,
        &[data-mfb-state="open"] {
            .mfb-component__list {
                @for $i from 1 through $number-of-child-buttons {
                    $distance: -1 * $mfb-button-space * $i;

                    li:nth-child(#{$i}) {
                        -webkit-transform: translateY($distance) scale(1);
                        transform: translateY($distance) scale(1);
                        // this is the delay at which the buttons appear          
                        transition-delay: $i * 0.05s;
                    }
                }
            }
        }
    }

}

// Ugly work-around for this https://github.com/sass/sass/issues/451
@if $effects-slidein==true {
    @include effects-slidein;
}

@if $effects-slidein==true {
    @include effects-slidein-spring;
}

@if $effects-zoomin==true {
    @include effects-zoomin;
}

@if $effects-fountain==true {
    @include effects-fountain;
}

/*------------------------------------*\
    #LABELS | base
\*------------------------------------*/

/**
 * These are the labels associated to each button,
 * exposed only when hovering the related button.
 * They are called labels but are in fact data-attributes of
 * each button (an anchor tag).
 */

[data-mfb-label]:after {
    content: attr(data-mfb-label);
    opacity: 0;
    transition: all $label-hover-off;
    // background: $dark;
    padding: 4px 10px;
    border-radius: 3px;
    // color: rgba(255, 255, 255, 0.8);
    font-size: 12px;
    font-weight: 600;
    pointer-events: none;
    line-height: normal;
    position: absolute;
    top: 50%;
    margin-top: - (4px + $font-size-sm / 2);
    transition: all $label-hover-off; // the label disappears at this speed
}

[data-mfb-toggle="hover"] [data-mfb-label]:hover:after,
[data-mfb-state="open"] [data-mfb-label]:after {
    content: attr(data-mfb-label);
    opacity: 1;
    transition: all $label-hover-on; // the label appears at this speed
}

/*------------------------------------*\
    #LABELS | Modifiers
\*------------------------------------*/
.mfb-component--br,
.mfb-component--tr {
    [data-mfb-label]:after {
        content: attr(data-mfb-label);
        right: $mfb-button-label-space;
    }
}

.mfb-component--br .mfb-component__list,
.mfb-component--tr .mfb-component__list {
    [data-mfb-label]:after {
        content: attr(data-mfb-label);
        right: $mfb-button-label-space - ($mfb-main-button-size - $child_button_size) / 2;
    }
}

.mfb-component--tl,
.mfb-component--bl {
    [data-mfb-label]:after {
        content: attr(data-mfb-label);
        left: $mfb-button-label-space;
    }
}

.mfb-component--tl .mfb-component__list,
.mfb-component--bl .mfb-component__list {
    [data-mfb-label]:after {
        content: "attr(data-mfb-label)";
        left: $mfb-button-label-space - ($mfb-main-button-size - $child_button_size) / 2;
    }
}

/*------------------------------------*\
    #DEVELOPMENT | In development
\*------------------------------------*/
/**
 * This part is where unfinished code should stay.
 * When a feature is ready(sh) move these styles to their proper place.
 */



/*------------------------------------*\
    #DEVELOPMENT | Debuggers
\*------------------------------------*/

/**
 * These are mainly helpers for development. They do not have to end up
 * in production but it's handy to keep them when developing.
 */


/**
 * Apply this class to the html tag when developing the slide-in button
 */